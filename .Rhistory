} else {
humanOrthologs <- mouseHumanOrthologs[mouseHumanOrthologs$Gene.stable.ID %in% inputGenes,]
}
inputGenes <- humanOrthologs$Human.gene.stable.ID
expressionData <- data[intersect(row.names(data), mouseHumanOrthologs$Human.gene.stable.ID),]
se <- SummarizedExperiment(assays = SimpleList(as.matrix(expressionData)), rowData = row.names(expressionData), colData = colnames(expressionData))
cellSpecificGenesExp <- teGeneRetrieval(se, expressedGeneThreshold = 1)
print(paste("Number of input genes found is", length(inputGenes)))
gs <- GeneSet(geneIds=toupper(inputGenes))
output2 <- teEnrichmentCustom(gs, cellSpecificGenesExp)
enrichmentOutput <- setNames(data.frame(assay(output2[[1]]), row.names = rowData(output2[[1]])[,1]), colData(output2[[1]])[,1])
row.names(cellDetails) <- cellDetails$RName
enrichmentOutput$Tissue <- cellDetails[row.names(enrichmentOutput), "CellName"]
return(enrichmentOutput)
}
plotPCE <- function(enrichmentOutput, networkName) {
p <- ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,
label = Tissue.Specific.Genes, fill=Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(Adj. P-Value)')+
theme_bw()+
theme(legend.position='none', plot.margin=unit(c(1,1,1,1),"cm"))+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title =
element_text(size=15))+
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
panel.grid.major= element_blank(),panel.grid.minor = element_blank())+
ggtitle(networkName)
return(p)
}
type <- "GENIE3"
for (time in c("e7.5", "e8.5", "e9.5")) {
opt <- "Gene.stable.ID"
if (time %in% c("e7.5", "e8.5")) {
inputGenes <- loadInput(type, time, 2)
name <- paste0(time, "_", 2, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
} else {
for (i in 1:3) {
inputGenes <- loadInput(type, time, i)
name <- paste0(time, "_", i, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
}
}
loadInput <- function(type = c("STRING", "GENIE3"), time = c("e7.5", "e8.5", "e9.5"), i) {
if (type == "STRING") {
file <- read.table(paste0("Files/", type, "/", time, "/largestComponent/", time, "_", i, "/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
} else {
file <- read.table(paste0("Files/", type, "/", time, "/", time, "_", i, "/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
}
inputGenes <- file$name
return(inputGenes)
}
options(max.print = "75")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>",
fig.path = "Files/",
fig.width = 8,
prompt = FALSE,
tidy = FALSE,
message = FALSE,
warning = TRUE
)
knitr::opts_knit$set(width = 75)
type <- "STRING"
for (time in c("e7.5", "e8.5", "e9.5")) {
opt <- "Gene.name"
if (time %in% c("e7.5", "e8.5")) {
inputGenes <- loadInput(type, time, 1)
name <- paste0(time, "_", 1, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
} else {
for (i in 1:4) {
inputGenes <- loadInput(type, time, i)
name <- paste0(time, "_", i, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
}
}
paste0("Files/", type, "/", time, "/", time, "_", i, "/", time, "_", i, "_nodeTable.csv")
paste0("Files/", type, "/", time, "/v2pronto/", time, "_", i, "_nodeTable.csv")
type="GENIE3"
i=1
paste0("Files/", type, "/", time, "/v2pronto/", time, "_", i, "_nodeTable.csv")
loadInput <- function(type = c("STRING", "GENIE3"), time = c("e7.5", "e8.5", "e9.5"), i) {
if (type == "STRING") {
file <- read.table(paste0("Files/", type, "/", time, "/largestComponent/", time, "_", i, "/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
} else {
file <- read.table(paste0("Files/", type, "/", time, "/v2pronto/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
}
inputGenes <- file$name
return(inputGenes)
}
type <- "GENIE3"
for (time in c("e7.5", "e8.5", "e9.5")) {
opt <- "Gene.stable.ID"
inputGenes <- loadInput(type, time, i)
name <- paste0(time, "_", i, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
inputGenes
type <- "GENIE3"
for (time in c("e7.5", "e8.5", "e9.5")) {
for (i in 1:3) {
opt <- "Gene.stable.ID"
inputGenes <- loadInput(type, time, i)
name <- paste0(time, "_", i, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
}
file <- read.table(paste0("Files/", type, "/", time, "/v2pronto/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
View(file)
inputGenes <- file$name
type <- "GENIE3"
for (time in c("e7.5", "e8.5", "e9.5")) {
for (i in 1:3) {
opt <- "Gene.name"
inputGenes <- loadInput(type, time, i)
name <- paste0(time, "_", i, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
}
files <- list.files(path="C:/0_HaVu/PlacentaRNA-seq/Files/GENIE3/e7.5/v2pronto/", pattern = "node")
files
options(max.print = "75")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>",
fig.path = "Files/",
fig.width = 8,
prompt = FALSE,
tidy = FALSE,
message = FALSE,
warning = TRUE
)
knitr::opts_knit$set(width = 75)
library(dplyr)
t2g <- read.table("Files/t2g.txt", header = T)
terms <- c("inflammatory response", "female pregnancy", "morphogenesis of a branching structure",
"lipid biosynthetic process", "endothelial cell proliferation", "cholesterol metabolic process",
"response to insulin", "vasculature development", "positive regulation of cell migration", "epithelium migration",
"placenta development", "tube morphogenesis", "regulation of cell migration")
for (time in c("e7.5", "e8.5", "e9.5")) {
for (i in 1:3) {
#geneList <- read.table(paste0("Files/GENIE3/", time, "/v2pronto/", time, "_", i, "_nodeTable.csv"), header = T, sep = ",")
#genes <- inner_join(geneList, distinct(t2g[,2:3]), by = c("name" = "ext_gene"))
#goTerms <- go(genes$ens_gene)
#save(goTerms, file = paste0("Files/GENIE3/", time, "/v2pronto/", time, "_", i, "_BP_filtered.rda"))
load(paste0("Files/GENIE3/", time, "/v2pronto/", time, "_", i, "_BP_filtered.rda"))
print(paste0("Files/GENIE3/", time, "/v2pronto/", time, "_", i, "_BP_filtered.rda"))
print(goTerms[goTerms$Description %in% terms, c("Description", "qvalue", "Count", "Rank", "Fold")])
}
}
View(enrichmentOutput)
hubGFunc <- function(network) {
topDegree <- subset(network, network$Degree > quantile(network$Degree, 0.9))
topCloseness <- subset(network, network$ClosenessCentrality > quantile(network$ClosenessCentrality, 0.9))
topBetweenness <- subset(network, network$BetweennessCentrality > quantile(network$BetweennessCentrality, 0.9))
all <- intersect(intersect(topDegree$name, topCloseness$name), topBetweenness$name)
return(all)
}
library("dplyr")
for (time in c("e7.5", "e8.5", "e9.5")) {
network <- read.table(paste0("Files/GENIE3/", time, "/v2pronto/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
all <- hubGFunc(network)
print(paste0("Number of genes in the ", time, "_", i, "_GENIE3 network is ", length(unique(network$name))))
print(paste0("Hub genes of the ", time, "_", i, "_GENIE3 network are:"))
print(all)
}
library("dplyr")
for (time in c("e7.5", "e8.5", "e9.5")) {
for (i in 1:3){
network <- read.table(paste0("Files/GENIE3/", time, "/v2pronto/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
all <- hubGFunc(network)
print(paste0("Number of genes in the ", time, "_", i, "_GENIE3 network is ", length(unique(network$name))))
print(paste0("Hub genes of the ", time, "_", i, "_GENIE3 network are:"))
print(all)
}
}
options(max.print = "75")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>",
fig.path = "Files/",
fig.width = 8,
prompt = FALSE,
tidy = FALSE,
message = FALSE,
warning = TRUE
)
knitr::opts_knit$set(width = 75)
files <- list.files(path=paste0("Files/", type, "/e9.5/v2glay/"), ".rda")
files
library(dplyr)
t2g <- read.table("Files/t2g.txt", header = T)
terms <- c("inflammatory response", "female pregnancy", "morphogenesis of a branching structure",
"lipid biosynthetic process", "endothelial cell proliferation", "cholesterol metabolic process",
"response to insulin", "vasculature development", "positive regulation of cell migration", "epithelium migration",
"placenta development", "tube morphogenesis", "regulation of cell migration")
for (type in c("GENIE3", "STRING")) {
files <- list.files(path=paste0("Files/", type, "/e9.5/v2glay/"), ".rda")
files <- paste0("Files/", type, "/e9.5/v2glay/", files)
for (f in files) {
#   geneList <- read.table(f, header = T, sep = ",")
#   if (type=="STRING"){
#         genes <- inner_join(geneList, distinct(t2g[,2:3]), by = c("name" = "ext_gene"))
#   } else {
#         genes <- geneList
#         colnames(genes)[10] <- "ens_gene"
#   }
#   goTerms <- go(genes$ens_gene)
#   save(goTerms, file = paste0(f, "_BP_filtered.rda"))
load(f)
print(f)
print(goTerms[goTerms$Description %in% terms, c("Description", "qvalue", "Count", "Rank", "Fold")])
}
}
library(TissueEnrich)
library(ggplot2)
load(file = "Files/combine-test-expression1.Rdata")
mouseHumanOrthologs<-dataset$GRCH38$mouseHumanOrthologs
humanGeneMapping<-dataset$GRCH38$humanGeneMapping
#For VentoTormo Data
d <- dataset$PlacentaDeciduaBloodData
data <- d$expressionData
cellDetails <- d$cellDetails
organism <- "Mouse"
fetalCells <- c("Endo..f.", "fFB1", "fFB2", "EVT", "HB", "SCT", "VCT")
runPCE <- function(inputGenes, nameType = c("Gene.name", "Gene.stable.ID")) {
if (nameType == "Gene.name") {
humanOrthologs <- mouseHumanOrthologs[mouseHumanOrthologs$Gene.name %in% toupper(inputGenes),]
} else {
humanOrthologs <- mouseHumanOrthologs[mouseHumanOrthologs$Gene.stable.ID %in% inputGenes,]
}
inputGenes <- humanOrthologs$Human.gene.stable.ID
expressionData <- data[intersect(row.names(data), mouseHumanOrthologs$Human.gene.stable.ID),]
se <- SummarizedExperiment(assays = SimpleList(as.matrix(expressionData)), rowData = row.names(expressionData), colData = colnames(expressionData))
cellSpecificGenesExp <- teGeneRetrieval(se, expressedGeneThreshold = 1)
print(paste("Number of input genes found is", length(inputGenes)))
gs <- GeneSet(geneIds=toupper(inputGenes))
output2 <- teEnrichmentCustom(gs, cellSpecificGenesExp)
enrichmentOutput <- setNames(data.frame(assay(output2[[1]]), row.names = rowData(output2[[1]])[,1]), colData(output2[[1]])[,1])
row.names(cellDetails) <- cellDetails$RName
enrichmentOutput$Tissue <- cellDetails[row.names(enrichmentOutput), "CellName"]
enrichmentOutput <- subset(enrichmentOutput, rownames(enrichmentOutput) %in% fetalCells)
enrichmentOutput <- enrichmentOutput[enrichmentOutput$Log10PValue >= -log10(0.05) & enrichmentOutput$fold.change >= 2 & enrichmentOutput$Tissue.Specific.Genes >= 5,]
return(enrichmentOutput)
}
plotPCE <- function(enrichmentOutput, networkName) {
p <- ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,
label = Tissue.Specific.Genes, fill=Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(Adj. P-Value)')+
theme_bw()+
theme(legend.position='none', plot.margin=unit(c(1,1,1,1),"cm"))+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title =
element_text(size=15))+
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
panel.grid.major= element_blank(),panel.grid.minor = element_blank())+
ggtitle(networkName)
return(p)
}
loadInput <- function(type = c("STRING", "GENIE3"), time = c("e7.5", "e8.5", "e9.5"), i) {
if (type == "STRING") {
file <- read.table(paste0("Files/", type, "/", time, "/v2glay/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
} else {
file <- read.table(paste0("Files/", type, "/", time, "/v2pronto/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
}
inputGenes <- file$name
return(inputGenes)
}
type <- "STRING"
for (time in c("e9.5")) {
for (i in 1:5) {
opt <- "Gene.name"
inputGenes <- loadInput(type, time, i)
name <- paste0(time, "_", i, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
}
type <- "GENIE3"
for (time in c("e9.5")) {
for (i in 1:3) {
opt <- "Gene.stable.ID"
inputGenes <- loadInput(type, time, i)
name <- paste0(time, "_", i, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
}
inputGenes
type <- "GENIE3"
for (time in c("e9.5")) {
for (i in 1:3) {
opt <- "Gene.name"
inputGenes <- loadInput(type, time, i)
name <- paste0(time, "_", i, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
}
hubGFunc <- function(network) {
topDegree <- subset(network, network$Degree > quantile(network$Degree, 0.9))
topCloseness <- subset(network, network$ClosenessCentrality > quantile(network$ClosenessCentrality, 0.9))
topBetweenness <- subset(network, network$BetweennessCentrality > quantile(network$BetweennessCentrality, 0.9))
all <- intersect(intersect(topDegree$name, topCloseness$name), topBetweenness$name)
return(all)
}
library(TissueEnrich)
library(ggplot2)
load(file = "Files/combine-test-expression1.Rdata")
mouseHumanOrthologs<-dataset$GRCH38$mouseHumanOrthologs
humanGeneMapping<-dataset$GRCH38$humanGeneMapping
#For VentoTormo Data
d <- dataset$PlacentaDeciduaBloodData
data <- d$expressionData
cellDetails <- d$cellDetails
organism <- "Mouse"
fetalCells <- c("Endo..f.", "fFB1", "fFB2", "EVT", "HB", "SCT", "VCT")
runPCE <- function(inputGenes, nameType = c("Gene.name", "Gene.stable.ID")) {
if (nameType == "Gene.name") {
humanOrthologs <- mouseHumanOrthologs[mouseHumanOrthologs$Gene.name %in% toupper(inputGenes),]
} else {
humanOrthologs <- mouseHumanOrthologs[mouseHumanOrthologs$Gene.stable.ID %in% inputGenes,]
}
inputGenes <- humanOrthologs$Human.gene.stable.ID
expressionData <- data[intersect(row.names(data), mouseHumanOrthologs$Human.gene.stable.ID),]
se <- SummarizedExperiment(assays = SimpleList(as.matrix(expressionData)), rowData = row.names(expressionData), colData = colnames(expressionData))
cellSpecificGenesExp <- teGeneRetrieval(se, expressedGeneThreshold = 1)
print(paste("Number of input genes found is", length(inputGenes)))
gs <- GeneSet(geneIds=toupper(inputGenes))
output2 <- teEnrichmentCustom(gs, cellSpecificGenesExp)
enrichmentOutput <- setNames(data.frame(assay(output2[[1]]), row.names = rowData(output2[[1]])[,1]), colData(output2[[1]])[,1])
row.names(cellDetails) <- cellDetails$RName
enrichmentOutput$Tissue <- cellDetails[row.names(enrichmentOutput), "CellName"]
enrichmentOutput <- subset(enrichmentOutput, rownames(enrichmentOutput) %in% fetalCells)
enrichmentOutput <- enrichmentOutput[enrichmentOutput$Log10PValue >= -log10(0.05) & enrichmentOutput$fold.change >= 2 & enrichmentOutput$Tissue.Specific.Genes >= 5,]
return(enrichmentOutput)
}
plotPCE <- function(enrichmentOutput, networkName) {
p <- ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,
label = Tissue.Specific.Genes, fill=Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(Adj. P-Value)')+
theme_bw()+
theme(legend.position='none', plot.margin=unit(c(1,1,1,1),"cm"))+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title =
element_text(size=15))+
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
panel.grid.major= element_blank(),panel.grid.minor = element_blank())+
ggtitle(networkName)
return(p)
}
loadInput <- function(type = c("STRING", "GENIE3"), time = c("e7.5", "e8.5", "e9.5"), i, ver=c(1, 2)) {
if (ver==1) {
file <- read.table(paste0("Files/", type, "/", time, "/v2glay/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
} else {
file <- read.table(paste0("Files/", type, "/", time, "/v2glay/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
}
inputGenes <- file$name
return(inputGenes)
}
type <- "STRING"
for (time in c("e9.5")) {
for (ver in 1:2) {
for (i in 1:5) {
opt <- "Gene.name"
inputGenes <- loadInput(type, time, i, ver)
name <- paste0(time, "_", i, "_", type)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
}
}
library(TissueEnrich)
library(ggplot2)
load(file = "Files/combine-test-expression1.Rdata")
mouseHumanOrthologs<-dataset$GRCH38$mouseHumanOrthologs
humanGeneMapping<-dataset$GRCH38$humanGeneMapping
#For VentoTormo Data
d <- dataset$PlacentaDeciduaBloodData
data <- d$expressionData
cellDetails <- d$cellDetails
organism <- "Mouse"
fetalCells <- c("Endo..f.", "fFB1", "fFB2", "EVT", "HB", "SCT", "VCT")
runPCE <- function(inputGenes, nameType = c("Gene.name", "Gene.stable.ID")) {
if (nameType == "Gene.name") {
humanOrthologs <- mouseHumanOrthologs[mouseHumanOrthologs$Gene.name %in% toupper(inputGenes),]
} else {
humanOrthologs <- mouseHumanOrthologs[mouseHumanOrthologs$Gene.stable.ID %in% inputGenes,]
}
inputGenes <- humanOrthologs$Human.gene.stable.ID
expressionData <- data[intersect(row.names(data), mouseHumanOrthologs$Human.gene.stable.ID),]
se <- SummarizedExperiment(assays = SimpleList(as.matrix(expressionData)), rowData = row.names(expressionData), colData = colnames(expressionData))
cellSpecificGenesExp <- teGeneRetrieval(se, expressedGeneThreshold = 1)
print(paste("Number of input genes found is", length(inputGenes)))
gs <- GeneSet(geneIds=toupper(inputGenes))
output2 <- teEnrichmentCustom(gs, cellSpecificGenesExp)
enrichmentOutput <- setNames(data.frame(assay(output2[[1]]), row.names = rowData(output2[[1]])[,1]), colData(output2[[1]])[,1])
row.names(cellDetails) <- cellDetails$RName
enrichmentOutput$Tissue <- cellDetails[row.names(enrichmentOutput), "CellName"]
enrichmentOutput <- subset(enrichmentOutput, rownames(enrichmentOutput) %in% fetalCells)
enrichmentOutput <- enrichmentOutput[enrichmentOutput$Log10PValue >= -log10(0.05) & enrichmentOutput$fold.change >= 2 & enrichmentOutput$Tissue.Specific.Genes >= 5,]
return(enrichmentOutput)
}
plotPCE <- function(enrichmentOutput, networkName) {
p <- ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,
label = Tissue.Specific.Genes, fill=Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(Adj. P-Value)')+
theme_bw()+
theme(legend.position='none', plot.margin=unit(c(1,1,1,1),"cm"))+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title =
element_text(size=15))+
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
panel.grid.major= element_blank(),panel.grid.minor = element_blank())+
ggtitle(networkName)
return(p)
}
loadInput <- function(type = c("STRING", "GENIE3"), time = c("e7.5", "e8.5", "e9.5"), i, ver=c(1, 2)) {
if (ver==1) {
file <- read.table(paste0("Files/", type, "/", time, "/v2glay/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
} else {
file <- read.table(paste0("Files/", type, "/", time, "/v2glay/", time, "_", i, "_nodeTable_2.csv"), sep = ",", header = T)
}
inputGenes <- file$name
return(inputGenes)
}
type <- "STRING"
for (time in c("e9.5")) {
for (ver in 1:2) {
for (i in 1:5) {
opt <- "Gene.name"
inputGenes <- loadInput(type, time, i, ver)
name <- paste0(time, "_", i, "_", type, ver)
enrichmentOutput <- runPCE(inputGenes, opt)
print(plotPCE(enrichmentOutput, name))
}
}
}
library(TissueEnrich)
library(ggplot2)
load(file = "Files/combine-test-expression1.Rdata")
mouseHumanOrthologs<-dataset$GRCH38$mouseHumanOrthologs
humanGeneMapping<-dataset$GRCH38$humanGeneMapping
#For VentoTormo Data
d <- dataset$PlacentaDeciduaBloodData
data <- d$expressionData
cellDetails <- d$cellDetails
organism <- "Mouse"
fetalCells <- c("Endo..f.", "fFB1", "fFB2", "EVT", "HB", "SCT", "VCT")
runPCE <- function(inputGenes, nameType = c("Gene.name", "Gene.stable.ID")) {
if (nameType == "Gene.name") {
humanOrthologs <- mouseHumanOrthologs[mouseHumanOrthologs$Gene.name %in% toupper(inputGenes),]
} else {
humanOrthologs <- mouseHumanOrthologs[mouseHumanOrthologs$Gene.stable.ID %in% inputGenes,]
}
inputGenes <- humanOrthologs$Human.gene.stable.ID
expressionData <- data[intersect(row.names(data), mouseHumanOrthologs$Human.gene.stable.ID),]
se <- SummarizedExperiment(assays = SimpleList(as.matrix(expressionData)), rowData = row.names(expressionData), colData = colnames(expressionData))
cellSpecificGenesExp <- teGeneRetrieval(se, expressedGeneThreshold = 1)
print(paste("Number of input genes found is", length(inputGenes)))
gs <- GeneSet(geneIds=toupper(inputGenes))
output2 <- teEnrichmentCustom(gs, cellSpecificGenesExp)
enrichmentOutput <- setNames(data.frame(assay(output2[[1]]), row.names = rowData(output2[[1]])[,1]), colData(output2[[1]])[,1])
row.names(cellDetails) <- cellDetails$RName
enrichmentOutput$Tissue <- cellDetails[row.names(enrichmentOutput), "CellName"]
enrichmentOutput <- subset(enrichmentOutput, rownames(enrichmentOutput) %in% fetalCells)
enrichmentOutput <- enrichmentOutput[enrichmentOutput$Log10PValue >= -log10(0.05) & enrichmentOutput$fold.change >= 2 & enrichmentOutput$Tissue.Specific.Genes >= 5,]
return(enrichmentOutput)
}
plotPCE <- function(enrichmentOutput, networkName) {
p <- ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,
label = Tissue.Specific.Genes, fill=Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(Adj. P-Value)')+
theme_bw()+
theme(legend.position='none', plot.margin=unit(c(1,1,1,1),"cm"))+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title =
element_text(size=15))+
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
panel.grid.major= element_blank(),panel.grid.minor = element_blank())+
ggtitle(networkName)
return(p)
}
loadInput <- function(type = c("STRING", "GENIE3"), time = c("e7.5", "e8.5", "e9.5"), i, ver) {
if (ver==1) {
file <- read.table(paste0("Files/", type, "/", time, "/v2glay/", time, "_", i, "_nodeTable.csv"), sep = ",", header = T)
} else {
file <- read.table(paste0("Files/", type, "/", time, "/v2glay/", time, "_", i, "_nodeTable_2.csv"), sep = ",", header = T)
}
inputGenes <- file$name
return(inputGenes)
}
type <- "GENIE3"
time="e9.5"
i=1
inputGenes <- loadInput(type, time, i, 1)
inputGenes
184825-1-183825+1
