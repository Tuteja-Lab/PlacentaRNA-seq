options(max.print = "75")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>",
fig.path = "Files/",
fig.width = 8,
prompt = FALSE,
tidy = FALSE,
message = FALSE,
warning = TRUE
)
knitr::opts_knit$set(width = 75)
summ <- function(trans_cluster, tpm2=tpm2) {
tpm3 <- tpm2
tpm3 <- cbind(rownames(tpm2), tpm3)
rownames(tpm3) <- 1:nrow(tpm3)
colnames(tpm3)[1] <- "transcripts"
#e7.5
e7.5_table <- data.frame(tpm3$transcripts, rowMeans(tpm3[,c("E7.5_2", "E7.5_3", "E7.5_4", "E7.5_5", "E7.5_6")]))
e7.5_table$time <- c("e7.5")
rownames(e7.5_table) <- 1:nrow(e7.5_table)
colnames(e7.5_table) <- c("transcripts", "mean_cts_scaled", "time")
#e8.5
e8.5_table <- data.frame(tpm3$transcripts, rowMeans(tpm3[,c("E8.5_1", "E8.5_2", "E8.5_3", "E8.5_4", "E8.5_5", "E8.5_6")]))
e8.5_table$time <- c("e8.5")
rownames(e8.5_table) <- 1:nrow(e8.5_table)
colnames(e8.5_table) <- c("transcripts", "mean_cts_scaled", "time")
#e9.5
e9.5_table <- data.frame(tpm3$transcripts, rowMeans(tpm3[,c("E9.5_1", "E9.5_2", "E9.5_3", "E9.5_4", "E9.5_5")]))
e9.5_table$time <- c("e9.5")
rownames(e9.5_table) <- 1:nrow(e9.5_table)
colnames(e9.5_table) <- c("transcripts", "mean_cts_scaled", "time")
summary <- rbind(rbind(e7.5_table, e8.5_table), e9.5_table)
summary <- summary[order(summary$transcripts),]
summary <- inner_join(summary, trans_cluster, by = c("transcripts" = "name"))
summary <- inner_join(summary, t2g, by = c("transcripts" = "target_id"))
return(summary)
}
plotClus <- function(summary, title){
ascl2 <- subset(summary, summary$ext_gene == "Ascl2") #e7.5
gjb5 <- subset(summary, summary$ext_gene == "Gjb5") #e7.5
dnmt1 <- subset(summary, summary$ext_gene == "Dnmt1") #e8.5
itga4 <- subset(summary, summary$ext_gene == "Itga4") #e8.5
gjb2 <- subset(summary, summary$ext_gene == "Gjb2") #e9.5
igf2 <- subset(summary, summary$ext_gene == "Igf2") #e9.5
p <- ggplot(aes(time, mean_cts_scaled), data = summary) +
geom_line(aes(group = transcripts), alpha = 0.5, colour = "grey77") +
geom_line(stat = "summary", fun = "median", size = 2,
aes(group = 1, color = "Group median")) +
labs(title = title,
x = "Time point",
y = "Scaled mean transcript counts", color = "Legend", linetype = "Legend") +
theme(plot.title = element_text(size = 25, face = "bold"), legend.text=element_text(size=20)) +
geom_line(data = ascl2, size = 2.5, aes(group = transcripts, color = "Ascl2", linetype = "Ascl2"), alpha = 1) + #e7.5
geom_line(data = gjb5, size = 2, aes(group = transcripts, color = "Gjb5", linetype = "Gjb5" ), alpha = 1) + #e7.5
geom_line(data = dnmt1, size = 2, aes(group = transcripts, color = "Dnmt1", linetype = "Dnmt1"), alpha = 1) + #e8.5
geom_line(data = itga4, size = 2, aes(group = transcripts, color = "Itga4", linetype = "Itga4"), alpha = 1) + #e8.5
geom_line(data = gjb2, size = 2, aes(group = transcripts, color = "Gjb2", linetype = "Gjb2"), alpha = 1) + #e9.5
geom_line(data = igf2, size = 2, aes(group = transcripts, color = "Igf2", linetype = "Igf2"), alpha = 1) + #e9.5
scale_color_manual(name = "Legend", values = c("Ascl2" = "darkolivegreen4", "Gjb5" = "yellow3",
"Dnmt1" = "dodgerblue4", "Itga4" = "deepskyblue4",
"Gjb2" = "saddlebrown", "Igf2" = "salmon3",
"Group median" = "grey22")) +
scale_linetype_manual(name = "Legend", values = c("Ascl2" = "solid", "Gjb5" = "solid",
"Dnmt1" = "twodash", "Itga4" = "solid",
"Gjb2" = "solid", "Igf2" = "solid",
"Group median" = "solid")) +
guides(linetype=F,
colour=guide_legend(keywidth = 3, keyheight = 1)) +
theme(text = element_text(size=25),
legend.text=element_text(size=25),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text.x = element_text(angle=0, hjust=0.5, size = 25),
axis.text.y = element_text(size = 25)) +
facet_grid(cols = vars(value))
return(p)
}
###building transcript names =====
t2g <- read.table("Files/t2g.txt", header = T, sep = "\t")
t2g <- t2g[order(t2g$target_id),]
coding <- read.table("Files/Mus_musculus_grcm38_coding_transcripts.txt", header = F)
library("ggplot2")
set.seed(123)
tpm2 <- read.table("Files/tpmForClustering.txt", row.names = 1, header = T, sep = "\t")
km <- kmeans(tpm2, centers = 3)
trans_cluster_kmeans <- km$cluster %>% enframe()
library("dplyr")
set.seed(123)
tpm2 <- read.table("Files/tpmForClustering.txt", row.names = 1, header = T, sep = "\t")
km <- kmeans(tpm2, centers = 3)
trans_cluster_kmeans <- km$cluster %>% enframe()
library("tidyverse")
set.seed(123)
tpm2 <- read.table("Files/tpmForClustering.txt", row.names = 1, header = T, sep = "\t")
km <- kmeans(tpm2, centers = 3)
trans_cluster_kmeans <- km$cluster %>% enframe()
summKmeans <- summ(trans_cluster_kmeans)
set.seed(123)
tpm2 <- read.table("Files/tpmForClustering.txt", row.names = 1, header = T, sep = "\t")
km <- kmeans(tpm2, centers = 3)
trans_cluster_kmeans <- km$cluster %>% enframe()
summKmeans <- summ(trans_cluster_kmeans, tpm2)
p <- plotClus(summKmeans, "K-means Clustering of Transcripts")
p
p
plotClus <- function(summary, title){
ascl2 <- subset(summary, summary$ext_gene == "Ascl2") #e7.5
gjb5 <- subset(summary, summary$ext_gene == "Gjb5") #e7.5
dnmt1 <- subset(summary, summary$ext_gene == "Dnmt1") #e8.5
itga4 <- subset(summary, summary$ext_gene == "Itga4") #e8.5
gjb2 <- subset(summary, summary$ext_gene == "Gjb2") #e9.5
igf2 <- subset(summary, summary$ext_gene == "Igf2") #e9.5
p <- ggplot(aes(time, mean_cts_scaled), data = summary) +
geom_line(aes(group = transcripts), alpha = 0.5, colour = "grey77") +
geom_line(stat = "summary", fun = "median", size = 2,
aes(group = 1, color = "Group median")) +
labs(title = title,
x = "Time point",
y = "Scaled mean transcript counts", color = "Legend", linetype = "Legend") +
theme(plot.title = element_text(size = 15, face = "bold"), legend.text=element_text(size=20)) +
geom_line(data = ascl2, size = 2.5, aes(group = transcripts, color = "Ascl2", linetype = "Ascl2"), alpha = 1) + #e7.5
geom_line(data = gjb5, size = 2, aes(group = transcripts, color = "Gjb5", linetype = "Gjb5" ), alpha = 1) + #e7.5
geom_line(data = dnmt1, size = 2, aes(group = transcripts, color = "Dnmt1", linetype = "Dnmt1"), alpha = 1) + #e8.5
geom_line(data = itga4, size = 2, aes(group = transcripts, color = "Itga4", linetype = "Itga4"), alpha = 1) + #e8.5
geom_line(data = gjb2, size = 2, aes(group = transcripts, color = "Gjb2", linetype = "Gjb2"), alpha = 1) + #e9.5
geom_line(data = igf2, size = 2, aes(group = transcripts, color = "Igf2", linetype = "Igf2"), alpha = 1) + #e9.5
scale_color_manual(name = "Legend", values = c("Ascl2" = "darkolivegreen4", "Gjb5" = "yellow3",
"Dnmt1" = "dodgerblue4", "Itga4" = "deepskyblue4",
"Gjb2" = "saddlebrown", "Igf2" = "salmon3",
"Group median" = "grey22")) +
scale_linetype_manual(name = "Legend", values = c("Ascl2" = "solid", "Gjb5" = "solid",
"Dnmt1" = "twodash", "Itga4" = "solid",
"Gjb2" = "solid", "Igf2" = "solid",
"Group median" = "solid")) +
guides(linetype=F,
colour=guide_legend(keywidth = 3, keyheight = 1)) +
theme(text = element_text(size=15),
legend.text=element_text(size=15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
axis.text.x = element_text(angle=0, hjust=0.5, size = 25),
axis.text.y = element_text(size = 15)) +
facet_grid(cols = vars(value))
return(p)
}
p <- plotClus(summKmeans, "K-means Clustering of Transcripts")
p
trans_cluster_som <- read.table("Files/trans_cluster_som.txt", header = T)
summSOM <- summ(trans_cluster_som, tpm2)
p <- plotClus(summSOM, "Slef-organizing Maps of Transcripts")
p
trans_cluster_som <- read.table("Files/trans_cluster_sc.txt", header = T)
summSC <- summ(trans_cluster_sc, tpm2)
trans_cluster_sc <- read.table("Files/trans_cluster_sc.txt", header = T)
summSC <- summ(trans_cluster_sc, tpm2)
p <- plotClus(summSC, "Spectral Clustering of Transcripts")
p
paste0("Files/STRING/", time, "specific_TSS.bed")
time<-"e7.5"
paste0("Files/STRING/", time, "specific_TSS.bed")
paste0("Files/", time, "specific_TSS.bed")
paste0("Files/STRING/", time, "/", time, "_string_mapping.tsv")
options(max.print = "75")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>",
fig.path = "Files/",
fig.width = 8,
prompt = FALSE,
tidy = FALSE,
message = FALSE,
warning = TRUE
)
knitr::opts_knit$set(width = 75)
<<<<<<< Updated upstream
library("tximport")
library("GENIE3")
library("dplyr")
#setwd("/")
#building transcript names
t2g <- read.table("Files/t2g.txt", header = T, sep = "\t")
for (time in c("e7.5", "e8.5", "e9.5")) {
sample <- list.files(path="Z:/hhvu/Project1_2/RNA-seq/5B_GENIE3/kallisto_GENIE3", pattern = time)
files <- file.path("Z:/hhvu/Project1_2/RNA-seq/5B_GENIE3/kallisto_GENIE3/", sample)
kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = t2g, ignoreAfterBar = TRUE, countsFromAbundance="lengthScaledTPM")
exprMatr <- as.matrix(kallisto.tsv$counts)
exprMatr <- t(scale(t(exprMatr)))
regulators <- read.table(paste0("Files/", time, "specific_TFensGenes.txt"), header = F)
regulators <- regulators[regulators$V1 %in% rownames(exprMatr), "V1"]
set.seed(123) # For reproducibility of results
weightMat <- GENIE3(exprMatr, regulators = as.vector(unique(regulators)))
linkList <- getLinkList(weightMat)
linkList2 <- getLinkList(weightMat, threshold=quantile(linkList$weight, 0.9))
print(time)
print(linkList2[1:3,])
#write.table(linkList2, paste0("Files/GENIE3/", time, "/", time, "_0.9.txt"), row.names = F, quote = F, sep = "\t")
}
library("tximport")
library("GENIE3")
library("dplyr")
setwd("Z:/hhvu/Project1_2/RNA-seq/PlacentaRNA-seq/")
#building transcript names
t2g <- read.table("Files/t2g.txt", header = T, sep = "\t")
for (time in c("e7.5", "e8.5", "e9.5")) {
sample <- list.files(path="Files/GENIE3/kallisto_GENIE3", pattern = time)
files <- file.path("Files/GENIE3/kallisto_GENIE3/", sample)
kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = t2g, ignoreAfterBar = TRUE, countsFromAbundance="lengthScaledTPM")
exprMatr <- as.matrix(kallisto.tsv$counts)
exprMatr <- t(scale(t(exprMatr)))
regulators <- read.table(paste0("Files/", time, "specific_TFensGenes.txt"), header = F)
regulators <- regulators[regulators$V1 %in% rownames(exprMatr), "V1"]
set.seed(123) # For reproducibility of results
weightMat <- GENIE3(exprMatr, regulators = as.vector(unique(regulators)))
linkList <- getLinkList(weightMat)
linkList2 <- getLinkList(weightMat, threshold=quantile(linkList$weight, 0.9))
print(time)
print(linkList2[1:3,])
#write.table(linkList2, paste0("Files/GENIE3/", time, "/", time, "_0.9.txt"), row.names = F, quote = F, sep = "\t")
}
options(max.print = "75")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>",
fig.path = "Files/",
fig.width = 8,
prompt = FALSE,
tidy = FALSE,
message = FALSE,
warning = TRUE
)
knitr::opts_knit$set(width = 75)
library("tximport")
library("GENIE3")
library("dplyr")
setwd("Z:/hhvu/Project1_2/RNA-seq/PlacentaRNA-seq/")
#building transcript names
t2g <- read.table("Files/t2g.txt", header = T, sep = "\t")
for (time in c("e7.5", "e8.5", "e9.5")) {
sample <- list.files(path="Files/GENIE3/kallisto_GENIE3", pattern = time)
files <- file.path("Files/GENIE3/kallisto_GENIE3/", sample)
kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = t2g, ignoreAfterBar = TRUE, countsFromAbundance="lengthScaledTPM")
exprMatr <- as.matrix(kallisto.tsv$counts)
exprMatr <- t(scale(t(exprMatr)))
regulators <- read.table(paste0("Files/", time, "specific_TFensGenes.txt"), header = F)
regulators <- regulators[regulators$V1 %in% rownames(exprMatr), "V1"]
set.seed(123) # For reproducibility of results
weightMat <- GENIE3(exprMatr, regulators = as.vector(unique(regulators)))
linkList <- getLinkList(weightMat)
linkList2 <- getLinkList(weightMat, threshold=quantile(linkList$weight, 0.9))
print(time)
print(linkList2[1:3,])
#write.table(linkList2, paste0("Files/GENIE3/", time, "/", time, "_0.9.txt"), row.names = F, quote = F, sep = "\t")
}
sessionInfo()
library(ggplot2)
library(tidymodels)
files <- list.files("Z:/hhvu/Project4_peakCallingATAC-seq/MCF7/wholeGenome/annotated/finalLabels/", "Scores")
files <- files[grep("txt", files)]
all <- data.frame(.threshold=as.numeric(), recall=as.numeric(),
precision=as.numeric(), test=as.character())
for (i in files) {
dat <- read.table(paste0("Z:/hhvu/Project4_peakCallingATAC-seq/MCF7/wholeGenome/annotated/finalLabels//", i), header = F, stringsAsFactors = FALSE)
dat$V4 <- as.numeric(dat$V4)
dat2 <- dat[order(-dat$V4), c(ncol(dat)-1, ncol(dat), 4)]
colnames(dat2) <- c("pred_class", "true_class", "score")
dat2$true_class <- as.factor(dat2$true_class)
pr_dat <- pr_curve(dat2, truth = dat2$true_class, score, event_level = "second")
pr_dat$test <- i
all <- rbind(all, pr_dat)
}
pdf("Z:/hhvu/Project4_peakCallingATAC-seq/MCF7/wholeGenome/annotated/finalLabels/prcurve.pdf", height=7, width=7)
ggplot(data=all, aes(recall, precision, color=test)) + geom_path() + coord_fixed()
dev.off()
library("tximport")
library("GENIE3")
library("dplyr")
setwd("Z:/hhvu/Project1_2/RNA-seq/PlacentaRNA-seq/")
#building transcript names
t2g <- read.table("Files/t2g.txt", header = T, sep = "\t")
for (time in c("e7.5", "e8.5", "e9.5")) {
sample <- list.files(path="Files/GENIE3/kallisto_GENIE3", pattern = time)
files <- file.path("Files/GENIE3/kallisto_GENIE3/", sample)
kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = t2g, ignoreAfterBar = TRUE, countsFromAbundance="lengthScaledTPM")
exprMatr <- as.matrix(kallisto.tsv$counts)
exprMatr <- t(scale(t(exprMatr)))
regulators <- read.table(paste0("Files/", time, "specific_TFensGenes.txt"), header = F)
regulators <- regulators[regulators$V1 %in% rownames(exprMatr), "V1"]
set.seed(123) # For reproducibility of results
weightMat <- GENIE3(exprMatr, regulators = as.vector(unique(regulators)))
linkList <- getLinkList(weightMat)
linkList2 <- getLinkList(weightMat, threshold=quantile(linkList$weight, 0.9))
print(time)
print(linkList2[1:3,])
#write.table(linkList2, paste0("Files/GENIE3/", time, "/", time, "_0.9.txt"), row.names = F, quote = F, sep = "\t")
}
files <- list.files("Z:/hhvu/Project4_peakCallingATAC-seq/MCF7/wholeGenome/annotated/finalLabels/", "Scores")
files <- files[grep("txt", files)]
all <- data.frame(.threshold=as.numeric(), recall=as.numeric(),
precision=as.numeric(), test=as.character())
for (i in files) {
dat <- read.table(paste0("Z:/hhvu/Project4_peakCallingATAC-seq/MCF7/wholeGenome/annotated/finalLabels//", i), header = F, stringsAsFactors = FALSE)
dat$V4 <- as.numeric(dat$V4)
dat2 <- dat[order(-dat$V4), c(ncol(dat)-1, ncol(dat), 4)]
colnames(dat2) <- c("pred_class", "true_class", "score")
dat2$true_class <- as.factor(dat2$true_class)
pr_dat <- pr_curve(dat2, truth = dat2$true_class, score, event_level = "second")
pr_dat$test <- i
all <- rbind(all, pr_dat)
}
pdf("Z:/hhvu/Project4_peakCallingATAC-seq/MCF7/wholeGenome/annotated/finalLabels/prcurve.pdf", height=7, width=7)
ggplot(data=all, aes(recall, precision, color=test)) + geom_path() + coord_fixed()
dev.off()
View(all)
View(pr_dat)
=======
###building sample description
dir <- "Files/1_kallisto/"
sample_id <- dir(file.path(dir))
sample_id <- sample_id[grep("^S", sample_id)] #remove the unrelated file if there is
sample_id
sample_id <- dir(file.path(dir))
sample_id
setwd(".")
sample_id <- dir(file.path(dir))
setwd("Z:/hhvu/Project1_2/RNA-seq/PlacentaRNA-seq/")
sample_id <- dir(file.path(dir))
###building sample description
dir <- "Files/1_kallisto/"
sample_id <- dir(file.path(dir))
###building sample description
dir <- "Z:/hhvu/Project1_2/RNA-seq/1_kallisto/official/"
sample_id <- dir(file.path(dir))
sample_id <- sample_id[grep("^S", sample_id)] #remove the unrelated file if there is
kal_dirs <- file.path(dir, sample_id, "abundance.h5")
sample_id
desc <- read.table("0.0_sampleNameMapping.csv", sep = ",", header = T)
View(desc)
desc <- read.table("0.0_sampleNameMapping.csv", sep = " ", header = F)
View(desc)
desc <- read.table("0.0_sampleNameMapping.csv", sep = "\t", header = F)
View(desc)
View(desc)
View(desc)
desc$condition <- substr(desc$V1, 1, 4)
kal_dirs
desc <- desc[order(desc$V2),]
View(desc)
desc <- dplyr::mutate(desc, path = kal_dirs)
View(desc)
colnames(desc) <- c("sample", "ID", "condition", "path")
View(desc)
desc <- desc[order(desc$condition), ]
desc <- subset(desc, !(desc$ID %in% c("S55", "S56"))) #remove sample S55, S56 outlier
e7.5vsE8.5 <- subset(desc, (desc$condition %in% c("E7.5", "E8.5")))
e8.5vsE9.5 <- subset(desc, (desc$condition %in% c("E9.5", "E8.5")))
e7.5vsE9.5 <- subset(desc, (desc$condition %in% c("E7.5", "E9.5")))
###building transcript name table. Since the object is presaved, just load it here
t2g <- read.table("Files/t2g.txt", header = T, sep = "\t")
###building transcript name table. Since the object is presaved, just load it here
t2g <- read.table("Files/t2g.txt", header = T, sep = "\t")
#load protein-coding transcripts
coding <- read.table("Files/Mus_musculus_grcm38_coding_transcripts.txt", header = F)
View(e7.5vsE8.5)
desc <- desc[,2:ncol(desc)]
colnames(desc) <- c("sample", "condition", "path")
View(desc)
>>>>>>> Stashed changes
